<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\Nixie_Clock.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\Nixie_Clock.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Feb 01 21:20:10 2017
<BR><P>
<H3>Maximum Stack Usage =        864 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; WlanConnect &rArr; configureSimpleLinkToDefaultState &rArr; sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[27]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[85]">Crash</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">Crash</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">CMD_GetWeather</a> from nixiecommands.o(i.CMD_GetWeather) referenced from nixiecommands.o(.data)
 <LI><a href="#[1d]">CMD_Help</a> from nixiecommands.o(i.CMD_Help) referenced from nixiecommands.o(.data)
 <LI><a href="#[26]">CMD_NodeIP</a> from nixiecommands.o(i.CMD_NodeIP) referenced from nixiecommands.o(.data)
 <LI><a href="#[25]">CMD_ReadConfigs</a> from nixiecommands.o(i.CMD_ReadConfigs) referenced from nixiecommands.o(.data)
 <LI><a href="#[1f]">CMD_SetAlarm</a> from nixiecommands.o(i.CMD_SetAlarm) referenced from nixiecommands.o(.data)
 <LI><a href="#[20]">CMD_SetCity</a> from nixiecommands.o(i.CMD_SetCity) referenced from nixiecommands.o(.data)
 <LI><a href="#[21]">CMD_SetColorWheel</a> from nixiecommands.o(i.CMD_SetColorWheel) referenced from nixiecommands.o(.data)
 <LI><a href="#[22]">CMD_SetNixiePower</a> from nixiecommands.o(i.CMD_SetNixiePower) referenced from nixiecommands.o(.data)
 <LI><a href="#[1e]">CMD_SetTime</a> from nixiecommands.o(i.CMD_SetTime) referenced from nixiecommands.o(.data)
 <LI><a href="#[24]">CMD_Snooze</a> from nixiecommands.o(i.CMD_Snooze) referenced from nixiecommands.o(.data)
 <LI><a href="#[2]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">GPIOA_intHandler</a> from interface.o(i.GPIOA_intHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">GPIOB_intHandler</a> from board.o(i.GPIOB_intHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 107 times from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">IntSysTick_Handler</a> from clock.o(i.IntSysTick_Handler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[27]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">SimpleLinkNetAppEventHandler</a> from wifi.o(i.SimpleLinkNetAppEventHandler) referenced from driver.o(i._SlDrvClassifyRxMsg)
 <LI><a href="#[12]">SimpleLinkWlanEventHandler</a> from wifi.o(i.SimpleLinkWlanEventHandler) referenced from driver.o(i._SlDrvClassifyRxMsg)
 <LI><a href="#[8]">Timer0IntHandler</a> from timer.o(i.Timer0IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[9]">Timer1IntHandler</a> from alarm.o(i.Timer1IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[a]">Timer2IntHandler</a> from sound.o(i.Timer2IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">UARTStdioIntHandler</a> from uartstdio.o(i.UARTStdioIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[11]">_SlDrvDeviceEventHandler</a> from device.o(i._SlDrvDeviceEventHandler) referenced from driver.o(i._SlDrvClassifyRxMsg)
 <LI><a href="#[13]">_SlDrvMsgReadSpawnCtx</a> from driver.o(i._SlDrvMsgReadSpawnCtx) referenced from driver.o(i._SlDrvMsgReadCmdCtx)
 <LI><a href="#[13]">_SlDrvMsgReadSpawnCtx</a> from driver.o(i._SlDrvMsgReadSpawnCtx) referenced from driver.o(i._SlDrvRxIrqHandler)
 <LI><a href="#[10]">_SlDrvNetAppEventHandler</a> from netapp.o(i._SlDrvNetAppEventHandler) referenced from driver.o(i._SlDrvClassifyRxMsg)
 <LI><a href="#[15]">_SlDrvRxIrqHandler</a> from driver.o(i._SlDrvRxIrqHandler) referenced from device.o(i.sl_Start)
 <LI><a href="#[d]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[c]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[16]">_sl_HandleAsync_Accept</a> from socket.o(i._sl_HandleAsync_Accept) referenced from driver.o(.constdata)
 <LI><a href="#[17]">_sl_HandleAsync_Connect</a> from socket.o(i._sl_HandleAsync_Connect) referenced from driver.o(.constdata)
 <LI><a href="#[19]">_sl_HandleAsync_DnsGetHostByName</a> from netapp.o(i._sl_HandleAsync_DnsGetHostByName) referenced from driver.o(.constdata)
 <LI><a href="#[1a]">_sl_HandleAsync_DnsGetHostByService</a> from netapp.o(i._sl_HandleAsync_DnsGetHostByService) referenced from driver.o(.constdata)
 <LI><a href="#[1b]">_sl_HandleAsync_PingResponse</a> from netapp.o(i._sl_HandleAsync_PingResponse) referenced from driver.o(.constdata)
 <LI><a href="#[18]">_sl_HandleAsync_Select</a> from socket.o(i._sl_HandleAsync_Select) referenced from driver.o(.constdata)
 <LI><a href="#[1c]">_sl_HandleAsync_Stop</a> from device.o(i._sl_HandleAsync_Stop) referenced from driver.o(.constdata)
 <LI><a href="#[14]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[e]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[128]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[47]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[129]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[12e]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[12f]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[a6]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[130]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[131]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[132]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[66]"></a>localtime</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSunRiseSunSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeUpdateRTC
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetTime
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>

<P><STRONG><a name="[2d]"></a>strftime</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetTime
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppSendTokenValue
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSunRiseSunSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeUpdateRTC
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetTime
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildGetRequest
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveFromUdp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeAppVariables
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Snooze
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetTime
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetNixiePower
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetColorWheel
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetCity
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetAlarm
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadConfigs
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5b]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildGetRequest
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadConfigs
</UL>

<P><STRONG><a name="[110]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[5c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildGetRequest
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostIP
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteCity
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetCity
</UL>

<P><STRONG><a name="[84]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdLineProcess
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[62]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Snooze
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetTime
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetNixiePower
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetColorWheel
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetCity
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetAlarm
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>

<P><STRONG><a name="[31]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSunSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSunRise
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Check
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustRTCDrift
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[33]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[139]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
</UL>

<P><STRONG><a name="[13a]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>

<P><STRONG><a name="[46]"></a>_ffix_r</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ffix_r
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[13b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[13d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[4a]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[c]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[40]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4c]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[4e]"></a>AdjustRTCDrift</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, clock.o(i.AdjustRTCDrift))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = AdjustRTCDrift &rArr; SetSunRiseSunSet &rArr; getWeather &rArr; GetHostIP &rArr; sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSunRiseSunSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeUpdateRTC
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>AlarmClock_Check</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, alarm.o(i.AlarmClock_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AlarmClock_Check &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Snooze
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1A_Start
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>AlarmClock_HourMin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, alarm.o(i.AlarmClock_HourMin))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadConfigs
</UL>

<P><STRONG><a name="[56]"></a>AlarmClock_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, alarm.o(i.AlarmClock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AlarmClock_Init &rArr; Sound_Init &rArr; Timer2A_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1A_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[78]"></a>AlarmClock_IsRing</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, alarm.o(i.AlarmClock_IsRing))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Snooze
</UL>

<P><STRONG><a name="[70]"></a>AlarmClock_IsSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, alarm.o(i.AlarmClock_IsSet))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadConfigs
</UL>

<P><STRONG><a name="[73]"></a>AlarmClock_Set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, alarm.o(i.AlarmClock_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetAlarm
</UL>

<P><STRONG><a name="[55]"></a>AlarmClock_Snooze</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, alarm.o(i.AlarmClock_Snooze))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AlarmClock_Snooze
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1A_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Check
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Snooze
</UL>

<P><STRONG><a name="[5a]"></a>BuildGetRequest</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, webservices.o(i.BuildGetRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BuildGetRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetCity
</UL>

<P><STRONG><a name="[115]"></a>Buttons_Init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, interface.o(i.Buttons_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buttons_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>CC3100_InterruptDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.CC3100_InterruptDisable))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Close
</UL>

<P><STRONG><a name="[5f]"></a>CC3100_InterruptEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.CC3100_InterruptEnable))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[11d]"></a>CC3100_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(i.CC3100_disable))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[11f]"></a>CC3100_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(i.CC3100_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[23]"></a>CMD_GetWeather</STRONG> (Thumb, 302 bytes, Stack size 96 bytes, nixiecommands.o(i.CMD_GetWeather))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = CMD_GetWeather &rArr; getWeather &rArr; GetHostIP &rArr; sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomX
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Weather
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Effects
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100ms
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrtoul
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixiecommands.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>CMD_Help</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nixiecommands.o(i.CMD_Help))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CMD_Help &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixiecommands.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>CMD_NodeIP</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, nixiecommands.o(i.CMD_NodeIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CMD_NodeIP &rArr; sl_NetCfgGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixiecommands.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>CMD_ReadConfigs</STRONG> (Thumb, 136 bytes, Stack size 128 bytes, nixiecommands.o(i.CMD_ReadConfigs))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = CMD_ReadConfigs &rArr; SendUdpDatagram &rArr; sl_NetCfgGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadCity
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_IsSet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_HourMin
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixiecommands.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>CMD_SetAlarm</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, nixiecommands.o(i.CMD_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = CMD_SetAlarm &rArr; SendUdpDatagram &rArr; sl_NetCfgGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrtoul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixiecommands.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>CMD_SetCity</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, nixiecommands.o(i.CMD_SetCity))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = CMD_SetCity &rArr; getWeather &rArr; GetHostIP &rArr; sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildGetRequest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteCity
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixiecommands.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>CMD_SetColorWheel</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, nixiecommands.o(i.CMD_SetColorWheel))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = CMD_SetColorWheel &rArr; SendUdpDatagram &rArr; sl_NetCfgGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorWheel_Set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrtoul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixiecommands.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>CMD_SetNixiePower</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, nixiecommands.o(i.CMD_SetNixiePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = CMD_SetNixiePower &rArr; SendUdpDatagram &rArr; sl_NetCfgGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixiePower_Set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrtoul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixiecommands.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>CMD_SetTime</STRONG> (Thumb, 220 bytes, Stack size 96 bytes, nixiecommands.o(i.CMD_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = CMD_SetTime &rArr; getTime &rArr; GetHostIP &rArr; sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrtoul
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcTimeDate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixiecommands.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>CMD_Snooze</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nixiecommands.o(i.CMD_Snooze))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = CMD_Snooze &rArr; SendUdpDatagram &rArr; sl_NetCfgGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Snooze
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_IsRing
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixiecommands.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>CheckSunRise</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, clock.o(i.CheckSunRise))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CheckSunRise &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixiePower_Set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorWheel_Set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixiePower_IsOn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>CheckSunSet</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, clock.o(i.CheckSunSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CheckSunSet &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorWheel_Set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>Clock_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, clock.o(i.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Clock_Init &rArr; RTCInit &rArr; GPIOPinTypeI2CSCL &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0A_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieClock_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>Clock_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clock.o(i.Clock_Start))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>CmdLineProcess</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, commandline.o(i.CmdLineProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdLineProcess &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveFromUdp
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>ColorWheel_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rgb.o(i.ColorWheel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ColorWheel_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>ColorWheel_Set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rgb.o(i.ColorWheel_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ColorWheel_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixiePower_Set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSunSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSunRise
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetColorWheel
</UL>

<P><STRONG><a name="[104]"></a>CopyPingResultsToReport</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netapp.o(i.CopyPingResultsToReport))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
</UL>

<P><STRONG><a name="[85]"></a>Crash</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi.o(i.Crash))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crash
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanConnect
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crash
</UL>

<P><STRONG><a name="[86]"></a>CreateConnection</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, wifi.o(i.CreateConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CreateConnection &rArr; sl_Connect &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Socket
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htons
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htonl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[c4]"></a>DAC_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Init
</UL>

<P><STRONG><a name="[c7]"></a>DAC_Out</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac.o(i.DAC_Out))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2IntHandler
</UL>

<P><STRONG><a name="[8b]"></a>Debounce_Buttons</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, interface.o(i.Debounce_Buttons))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Debounce_Buttons &rArr; Enable_GPIOA_Interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIOA_Interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>Delay_100ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, delay.o(i.Delay_100ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_100ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveFromUdp
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>

<P><STRONG><a name="[c0]"></a>Delay_12ns</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, delay.o(i.Delay_12ns))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRegister_Output
</UL>

<P><STRONG><a name="[b1]"></a>Delay_1ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, delay.o(i.Delay_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUdpServer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_3
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_2
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_1
</UL>

<P><STRONG><a name="[8d]"></a>Disable_GPIOA_Interrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, interface.o(i.Disable_GPIOA_Interrupts))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_intHandler
</UL>

<P><STRONG><a name="[8e]"></a>Disable_Interrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.Disable_Interrupts))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>

<P><STRONG><a name="[8c]"></a>Enable_GPIOA_Interrupts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, interface.o(i.Enable_GPIOA_Interrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIOA_Interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debounce_Buttons
</UL>

<P><STRONG><a name="[92]"></a>Enable_Interrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.Enable_Interrupts))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>

<P><STRONG><a name="[112]"></a>FPUEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fpu.o(i.FPUEnable))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
</UL>

<P><STRONG><a name="[113]"></a>FPULazyStackingEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fpu.o(i.FPULazyStackingEnable))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
</UL>

<P><STRONG><a name="[91]"></a>Flash_Erase</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, flashprogram.o(i.Flash_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Interrupts
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[6e]"></a>Flash_ReadCity</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, flashprogram.o(i.Flash_ReadCity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_ReadCity
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadConfigs
</UL>

<P><STRONG><a name="[93]"></a>Flash_Write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, flashprogram.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Write &rArr; Flash_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Interrupts
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Interrupts
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteCity
</UL>

<P><STRONG><a name="[74]"></a>Flash_WriteCity</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, flashprogram.o(i.Flash_WriteCity))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Flash_WriteCity &rArr; Flash_Write &rArr; Flash_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetCity
</UL>

<P><STRONG><a name="[5]"></a>GPIOA_intHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, interface.o(i.GPIOA_intHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOA_intHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_GPIOA_Interrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>GPIOB_intHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, board.o(i.GPIOB_intHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOB_intHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
</UL>

<P><STRONG><a name="[90]"></a>GPIOIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_intHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIOA_Interrupts
</UL>

<P><STRONG><a name="[5e]"></a>GPIOIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptDisable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_GPIOA_Interrupts
</UL>

<P><STRONG><a name="[60]"></a>GPIOIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptEnable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIOA_Interrupts
</UL>

<P><STRONG><a name="[94]"></a>GPIOIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_intHandler
</UL>

<P><STRONG><a name="[123]"></a>GPIOIntTypeSet</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[97]"></a>GPIOPadConfigSet</STRONG> (Thumb, 314 bytes, Stack size 28 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
</UL>

<P><STRONG><a name="[b8]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[95]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[98]"></a>GPIOPinTypeI2C</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeI2C &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[99]"></a>GPIOPinTypeI2CSCL</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeI2CSCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeI2CSCL &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[9a]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[125]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>

<P><STRONG><a name="[9b]"></a>GetHostIP</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wifi.o(i.GetHostIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = GetHostIP &rArr; sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[9d]"></a>GetRtcTimeDate</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, rtc.o(i.GetRtcTimeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetRtcTimeDate &rArr; I2CReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>GetStartResponseConvert</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, device.o(i.GetStartResponseConvert))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
</UL>

<P><STRONG><a name="[51]"></a>GetTimeUpdateRTC</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, clock.o(i.GetTimeUpdateRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = GetTimeUpdateRTC &rArr; getTime &rArr; GetHostIP &rArr; sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcTimeDate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustRTCDrift
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>I2CMasterBusy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterBusy))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSend
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceive
</UL>

<P><STRONG><a name="[a1]"></a>I2CMasterControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterControl))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSend
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceive
</UL>

<P><STRONG><a name="[a3]"></a>I2CMasterDataGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceive
</UL>

<P><STRONG><a name="[a0]"></a>I2CMasterDataPut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataPut))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSend
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceive
</UL>

<P><STRONG><a name="[ba]"></a>I2CMasterInitExpClk</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterInitExpClk))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[9f]"></a>I2CMasterSlaveAddrSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterSlaveAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSend
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceive
</UL>

<P><STRONG><a name="[124]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[a5]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[4]"></a>IntSysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(i.IntSysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>NixieClock_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, nixie.o(i.NixieClock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NixieClock_Init &rArr; ShiftRegister_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRegister_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[ab]"></a>NixieDisplay_Date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nixie.o(i.NixieDisplay_Date))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = NixieDisplay_Date &rArr; NixieDisplay &rArr; ShiftRegister_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>NixieDisplay_Effects</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nixie.o(i.NixieDisplay_Effects))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = NixieDisplay_Effects &rArr; NixieEffects_3 &rArr; NixieDisplayDigitbyDigit &rArr; ShiftRegister_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_3
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_2
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_1
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>

<P><STRONG><a name="[af]"></a>NixieDisplay_Time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nixie.o(i.NixieDisplay_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = NixieDisplay_Time &rArr; NixieDisplay &rArr; ShiftRegister_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>NixieDisplay_Weather</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nixie.o(i.NixieDisplay_Weather))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = NixieDisplay_Weather &rArr; NixieDisplay &rArr; ShiftRegister_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>

<P><STRONG><a name="[b0]"></a>NixieDots_toggle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nixie.o(i.NixieDots_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NixieDots_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_3
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_2
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_1
</UL>

<P><STRONG><a name="[7a]"></a>NixiePower_IsOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nixie.o(i.NixiePower_IsOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NixiePower_IsOn
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffClock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSunRise
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplayDigitbyDigit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay
</UL>

<P><STRONG><a name="[76]"></a>NixiePower_Set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nixie.o(i.NixiePower_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NixiePower_Set &rArr; ColorWheel_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorWheel_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffClock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSunRise
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetNixiePower
</UL>

<P><STRONG><a name="[b2]"></a>OpenUdpServer</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, udp.o(i.OpenUdpServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = OpenUdpServer &rArr; sl_SetSockOpt &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Socket
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SetSockOpt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htons
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Bind
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>RTCInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtc.o(i.RTCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTCInit &rArr; GPIOPinTypeI2CSCL &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[bb]"></a>Random</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, random.o(i.Random))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomX
</UL>

<P><STRONG><a name="[6b]"></a>RandomX</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, random.o(i.RandomX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RandomX
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_3
</UL>

<P><STRONG><a name="[117]"></a>Random_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, random.o(i.Random_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>ReciveFromUdp</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, udp.o(i.ReciveFromUdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ReciveFromUdp &rArr; sl_Close &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100ms
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdLineProcess
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_RecvFrom
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[127]"></a>SSIDataGetNonBlocking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>

<P><STRONG><a name="[126]"></a>SSIDataPutNonBlocking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPutNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>

<P><STRONG><a name="[122]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[72]"></a>SendUdpDatagram</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, udp.o(i.SendUdpDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SendUdpDatagram &rArr; sl_NetCfgGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Socket
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SendTo
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htons
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htonl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgGet
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Snooze
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetTime
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetNixiePower
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetColorWheel
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetCity
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetAlarm
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadConfigs
</UL>

<P><STRONG><a name="[77]"></a>SetRtcTimeDate</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, rtc.o(i.SetRtcTimeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetRtcTimeDate &rArr; I2CSend
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSend
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeUpdateRTC
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetTime
</UL>

<P><STRONG><a name="[52]"></a>SetSunRiseSunSet</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, clock.o(i.SetSunRiseSunSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = SetSunRiseSunSet &rArr; getWeather &rArr; GetHostIP &rArr; sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustRTCDrift
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>ShiftRegister_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, shiftregister.o(i.ShiftRegister_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ShiftRegister_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieClock_Init
</UL>

<P><STRONG><a name="[a9]"></a>ShiftRegister_Output</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, shiftregister.o(i.ShiftRegister_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ShiftRegister_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPin
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_12ns
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplayDigitbyDigit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay
</UL>

<P><STRONG><a name="[c1]"></a>SimpleLinkHttpServerCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi.o(i.SimpleLinkHttpServerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SimpleLinkHttpServerCallback &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>

<P><STRONG><a name="[f]"></a>SimpleLinkNetAppEventHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wifi.o(i.SimpleLinkNetAppEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SimpleLinkNetAppEventHandler &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(i._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[12]"></a>SimpleLinkWlanEventHandler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, wifi.o(i.SimpleLinkWlanEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SimpleLinkWlanEventHandler &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(i._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[c2]"></a>Sound_Highpitch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sound.o(i.Sound_Highpitch))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntHandler
</UL>

<P><STRONG><a name="[57]"></a>Sound_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sound.o(i.Sound_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sound_Init &rArr; Timer2A_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2A_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Init
</UL>

<P><STRONG><a name="[118]"></a>Switch_Ack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interface.o(i.Switch_Ack))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>SysCtlClockGet</STRONG> (Thumb, 304 bytes, Stack size 12 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[b6]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[b7]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[7f]"></a>SysTick_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer.o(i.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[82]"></a>Systick_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.Systick_Start))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Start
</UL>

<P><STRONG><a name="[8f]"></a>Systick_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.Systick_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Interrupts
</UL>

<P><STRONG><a name="[80]"></a>Timer0A_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, timer.o(i.Timer0A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0A_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[db]"></a>Timer0A_Start</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.Timer0A_Start))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanConnect
</UL>

<P><STRONG><a name="[dd]"></a>Timer0A_Stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.Timer0A_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanConnect
</UL>

<P><STRONG><a name="[8]"></a>Timer0IntHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.Timer0IntHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>Timer1A_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, timer.o(i.Timer1A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1A_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Init
</UL>

<P><STRONG><a name="[54]"></a>Timer1A_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.Timer1A_Start))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Check
</UL>

<P><STRONG><a name="[59]"></a>Timer1A_Stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.Timer1A_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Snooze
</UL>

<P><STRONG><a name="[9]"></a>Timer1IntHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alarm.o(i.Timer1IntHandler))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Highpitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>Timer2A_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, timer.o(i.Timer2A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer2A_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Init
</UL>

<P><STRONG><a name="[c6]"></a>Timer2A_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.Timer2A_Start))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Play
</UL>

<P><STRONG><a name="[c8]"></a>Timer2A_Stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.Timer2A_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2IntHandler
</UL>

<P><STRONG><a name="[a]"></a>Timer2IntHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sound.o(i.Timer2IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer2IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2A_Stop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>TurnOffClock</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, clock.o(i.TurnOffClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TurnOffClock &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixiePower_Set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixiePower_IsOn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>UARTFlushRx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uartstdio.o(i.UARTFlushRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTFlushRx
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[ca]"></a>UARTFlushTx</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uartstdio.o(i.UARTFlushTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTFlushTx
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[cc]"></a>UARTPeek</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uartstdio.o(i.UARTPeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTPeek
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>UARTStdioConfig</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, uartstdio.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTStdioConfig &rArr; UARTFlushTx
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[7]"></a>UARTStdioIntHandler</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, uartstdio.o(i.UARTStdioIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTStdioIntHandler &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>UARTgets</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, uartstdio.o(i.UARTgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTgets
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>UARTprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, uartstdio.o(i.UARTprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkHttpServerCallback
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWlanEventHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkNetAppEventHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanConnect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveFromUdp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUdpServer
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostIP
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateConnection
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetTime
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetNixiePower
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetColorWheel
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetCity
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetAlarm
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_NodeIP
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Help
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>

<P><STRONG><a name="[d4]"></a>UARTvprintf</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, uartstdio.o(i.UARTvprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>

<P><STRONG><a name="[d1]"></a>UARTwrite</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, uartstdio.o(i.UARTwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[d5]"></a>Uart_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart_Init &rArr; UARTStdioConfig &rArr; UARTFlushTx
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>WlanConnect</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, wifi.o(i.WlanConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = WlanConnect &rArr; configureSimpleLinkToDefaultState &rArr; sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsMainLoopTask
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0A_Stop
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0A_Start
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeAppVariables
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crash
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>_SlAsyncEventGenericHandler</STRONG> (Thumb, 746 bytes, Stack size 176 bytes, driver.o(i._SlAsyncEventGenericHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
</UL>

<P><STRONG><a name="[e0]"></a>_SlDrvBasicCmd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, driver.o(i._SlDrvBasicCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _SlDrvBasicCmd &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanDisconnect
</UL>

<P><STRONG><a name="[f4]"></a>_SlDrvClassifyRxMsg</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, driver.o(i._SlDrvClassifyRxMsg))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[e1]"></a>_SlDrvCmdOp</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, driver.o(i._SlDrvCmdOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevGet
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSetMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSet
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileDel
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicySet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Socket
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SetSockOpt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Bind
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgGet
</UL>

<P><STRONG><a name="[e6]"></a>_SlDrvCmdSend</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver.o(i._SlDrvCmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _SlDrvCmdSend &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppSendTokenValue
</UL>

<P><STRONG><a name="[e7]"></a>_SlDrvDataReadOp</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, driver.o(i._SlDrvDataReadOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _SlDrvDataReadOp &rArr; _SlDrvWaitForPoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_RecvFrom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Recv
</UL>

<P><STRONG><a name="[ea]"></a>_SlDrvDataWriteOp</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, driver.o(i._SlDrvDataWriteOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _SlDrvDataWriteOp &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SendTo
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
</UL>

<P><STRONG><a name="[11]"></a>_SlDrvDeviceEventHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, device.o(i._SlDrvDeviceEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _SlDrvDeviceEventHandler &rArr; _sl_HandleAsync_InitComplete &rArr; _SlDrvReleasePoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(i._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[ec]"></a>_SlDrvDriverCBDeinit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, driver.o(i._SlDrvDriverCBDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _SlDrvDriverCBDeinit &rArr; _SlDrvFlowContDeinit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContDeinit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjDeInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
</UL>

<P><STRONG><a name="[ef]"></a>_SlDrvDriverCBInit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, driver.o(i._SlDrvDriverCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SlDrvDriverCBInit &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[ed]"></a>_SlDrvFlowContDeinit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, flowcont.o(i._SlDrvFlowContDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvFlowContDeinit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
</UL>

<P><STRONG><a name="[f1]"></a>_SlDrvFlowContInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, flowcont.o(i._SlDrvFlowContInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvFlowContInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
</UL>

<P><STRONG><a name="[f2]"></a>_SlDrvMsgRead</STRONG> (Thumb, 838 bytes, Stack size 40 bytes, driver.o(i._SlDrvMsgRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlFindAndSetActiveObj
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvClassifyRxMsg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
</UL>

<P><STRONG><a name="[e5]"></a>_SlDrvMsgReadCmdCtx</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, driver.o(i._SlDrvMsgReadCmdCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSpawn
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[13]"></a>_SlDrvMsgReadSpawnCtx</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, driver.o(i._SlDrvMsgReadSpawnCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _SlDrvMsgReadSpawnCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Address Reference Count : 2]<UL><LI> driver.o(i._SlDrvMsgReadCmdCtx)
<LI> driver.o(i._SlDrvRxIrqHandler)
</UL>
<P><STRONG><a name="[e3]"></a>_SlDrvMsgWrite</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, driver.o(i._SlDrvMsgWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdSend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[10]"></a>_SlDrvNetAppEventHandler</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, netapp.o(i._SlDrvNetAppEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _SlDrvNetAppEventHandler &rArr; SimpleLinkHttpServerCallback &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkHttpServerCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppSendTokenValue
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(i._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[ee]"></a>_SlDrvObjDeInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver.o(i._SlDrvObjDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
</UL>

<P><STRONG><a name="[f0]"></a>_SlDrvObjInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, driver.o(i._SlDrvObjInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvObjInit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
</UL>

<P><STRONG><a name="[e9]"></a>_SlDrvReleasePoolObj</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, driver.o(i._SlDrvReleasePoolObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _SlDrvReleasePoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlRemoveFromList
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
</UL>

<P><STRONG><a name="[f3]"></a>_SlDrvRxHdrRead</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, driver.o(i._SlDrvRxHdrRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SlDrvRxHdrRead &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvShiftDWord
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[15]"></a>_SlDrvRxIrqHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, driver.o(i._SlDrvRxIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _SlDrvRxIrqHandler &rArr; _SlNonOsSpawn
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSpawn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(i.sl_Start)
</UL>
<P><STRONG><a name="[fb]"></a>_SlDrvShiftDWord</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver.o(i._SlDrvShiftDWord))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
</UL>

<P><STRONG><a name="[e8]"></a>_SlDrvWaitForPoolObj</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, driver.o(i._SlDrvWaitForPoolObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _SlDrvWaitForPoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
</UL>

<P><STRONG><a name="[f6]"></a>_SlFindAndSetActiveObj</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, driver.o(i._SlFindAndSetActiveObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _SlFindAndSetActiveObj
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[dc]"></a>_SlNonOsMainLoopTask</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nonos.o(i._SlNonOsMainLoopTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _SlNonOsMainLoopTask
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanConnect
</UL>

<P><STRONG><a name="[e2]"></a>_SlNonOsSemGet</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nonos.o(i._SlNonOsSemGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsMainLoopTask
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Select
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Connect
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Accept
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
</UL>

<P><STRONG><a name="[e4]"></a>_SlNonOsSemSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nonos.o(i._SlNonOsSemSet))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Select
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Connect
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Accept
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContDeinit
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxIrqHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
</UL>

<P><STRONG><a name="[f7]"></a>_SlNonOsSpawn</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, nonos.o(i._SlNonOsSpawn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _SlNonOsSpawn
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxIrqHandler
</UL>

<P><STRONG><a name="[fa]"></a>_SlRemoveFromList</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, driver.o(i._SlRemoveFromList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _SlRemoveFromList
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
</UL>

<P><STRONG><a name="[fc]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13f]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[6f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadConfigs
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[140]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[fe]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
</UL>

<P><STRONG><a name="[4f]"></a>__hardfp_difftime</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, difftime.o(i.__hardfp_difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSunSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSunRise
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Check
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustRTCDrift
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>__hardfp_lrintf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lrintf.o(i.__hardfp_lrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_lrintf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
</UL>

<P><STRONG><a name="[ff]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[141]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[142]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[143]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[100]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[4b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[119]"></a>_sl_BuildAddress</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, socket.o(i._sl_BuildAddress))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SendTo
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Bind
</UL>

<P><STRONG><a name="[16]"></a>_sl_HandleAsync_Accept</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, socket.o(i._sl_HandleAsync_Accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Accept &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>_sl_HandleAsync_Connect</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, socket.o(i._sl_HandleAsync_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Connect &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[19]"></a>_sl_HandleAsync_DnsGetHostByName</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, netapp.o(i._sl_HandleAsync_DnsGetHostByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_DnsGetHostByName &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[1a]"></a>_sl_HandleAsync_DnsGetHostByService</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, netapp.o(i._sl_HandleAsync_DnsGetHostByService))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sl_HandleAsync_DnsGetHostByService
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>_sl_HandleAsync_InitComplete</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, device.o(i._sl_HandleAsync_InitComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _sl_HandleAsync_InitComplete &rArr; _SlDrvReleasePoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartResponseConvert
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDeviceEventHandler
</UL>

<P><STRONG><a name="[1b]"></a>_sl_HandleAsync_PingResponse</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, netapp.o(i._sl_HandleAsync_PingResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPingResultsToReport
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[18]"></a>_sl_HandleAsync_Select</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, socket.o(i._sl_HandleAsync_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Select &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[1c]"></a>_sl_HandleAsync_Stop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, device.o(i._sl_HandleAsync_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Stop &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDeviceEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>_sl_TruncatePayloadByProtocol</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, socket.o(i._sl_TruncatePayloadByProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SendTo
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
</UL>

<P><STRONG><a name="[d8]"></a>configureSimpleLinkToDefaultState</STRONG> (Thumb, 216 bytes, Stack size 88 bytes, wifi.o(i.configureSimpleLinkToDefaultState))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = configureSimpleLinkToDefaultState &rArr; sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSUnRegisterService
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevGet
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSetMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSet
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileDel
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicySet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanDisconnect
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgSet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanConnect
</UL>

<P><STRONG><a name="[64]"></a>getTime</STRONG> (Thumb, 462 bytes, Stack size 88 bytes, webservices.o(i.getTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = getTime &rArr; GetHostIP &rArr; sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Recv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostIP
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateConnection
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeUpdateRTC
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetTime
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>

<P><STRONG><a name="[63]"></a>getWeather</STRONG> (Thumb, 850 bytes, Stack size 168 bytes, webservices.o(i.getWeather))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = getWeather &rArr; GetHostIP &rArr; sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorWheel_Set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Recv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostIP
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateConnection
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSunRiseSunSet
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetCity
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>

<P><STRONG><a name="[111]"></a>initClk</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, board.o(i.initClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initClk
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPULazyStackingEnable
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPUEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>initializeAppVariables</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wifi.o(i.initializeAppVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initializeAppVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanConnect
</UL>

<P><STRONG><a name="[b]"></a>main</STRONG> (Thumb, 724 bytes, Stack size 120 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = main &rArr; WlanConnect &rArr; configureSimpleLinkToDefaultState &rArr; sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopWDT
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanConnect
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgets
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPeek
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffClock
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Ack
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSunRiseSunSet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveFromUdp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUdpServer
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixiePower_Set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDots_toggle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Weather
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Time
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Effects
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Date
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeUpdateRTC
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcTimeDate
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadCity
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100ms
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debounce_Buttons
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorWheel_Set
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorWheel_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdLineProcess
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Start
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSunSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSunRise
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildGetRequest
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Snooze
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_IsRing
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_Check
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustRTCDrift
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[11e]"></a>registerInterruptHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.registerInterruptHandler))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[b4]"></a>sl_Bind</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, socket.o(i.sl_Bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sl_Bind &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_BuildAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUdpServer
</UL>

<P><STRONG><a name="[b3]"></a>sl_Close</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, socket.o(i.sl_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sl_Close &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveFromUdp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUdpServer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[8a]"></a>sl_Connect</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, socket.o(i.sl_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sl_Connect &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_BuildAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateConnection
</UL>

<P><STRONG><a name="[107]"></a>sl_DevGet</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, device.o(i.sl_DevGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sl_DevGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[88]"></a>sl_Htonl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, socket.o(i.sl_Htonl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sl_Htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateConnection
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
</UL>

<P><STRONG><a name="[87]"></a>sl_Htons</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, socket.o(i.sl_Htons))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sl_Htons
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUdpServer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateConnection
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
</UL>

<P><STRONG><a name="[9c]"></a>sl_NetAppDnsGetHostByName</STRONG> (Thumb, 202 bytes, Stack size 88 bytes, netapp.o(i.sl_NetAppDnsGetHostByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostIP
</UL>

<P><STRONG><a name="[11a]"></a>sl_NetAppMDNSRegisterUnregisterService</STRONG> (Thumb, 120 bytes, Stack size 312 bytes, netapp.o(i.sl_NetAppMDNSRegisterUnregisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSUnRegisterService
</UL>

<P><STRONG><a name="[10d]"></a>sl_NetAppMDNSUnRegisterService</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, netapp.o(i.sl_NetAppMDNSUnRegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[f9]"></a>sl_NetAppSendTokenValue</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, netapp.o(i.sl_NetAppSendTokenValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sl_NetAppSendTokenValue &rArr; _SlDrvCmdSend &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdSend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>

<P><STRONG><a name="[6d]"></a>sl_NetCfgGet</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, netcfg.o(i.sl_NetCfgGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sl_NetCfgGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_NodeIP
</UL>

<P><STRONG><a name="[10b]"></a>sl_NetCfgSet</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, netcfg.o(i.sl_NetCfgSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sl_NetCfgSet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[10f]"></a>sl_Recv</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, socket.o(i.sl_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sl_Recv &rArr; _SlDrvDataReadOp &rArr; _SlDrvWaitForPoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[bd]"></a>sl_RecvFrom</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, socket.o(i.sl_RecvFrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sl_RecvFrom &rArr; _SlDrvDataReadOp &rArr; _SlDrvWaitForPoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveFromUdp
</UL>

<P><STRONG><a name="[10e]"></a>sl_Send</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, socket.o(i.sl_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sl_Send &rArr; _SlDrvDataWriteOp &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_TruncatePayloadByProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWeather
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[be]"></a>sl_SendTo</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, socket.o(i.sl_SendTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sl_SendTo &rArr; _SlDrvDataWriteOp &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_TruncatePayloadByProtocol
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_BuildAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
</UL>

<P><STRONG><a name="[b5]"></a>sl_SetSockOpt</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, socket.o(i.sl_SetSockOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sl_SetSockOpt &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUdpServer
</UL>

<P><STRONG><a name="[89]"></a>sl_Socket</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, socket.o(i.sl_Socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sl_Socket &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUdpServer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateConnection
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUdpDatagram
</UL>

<P><STRONG><a name="[d9]"></a>sl_Start</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, device.o(i.sl_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sl_Start &rArr; _SlDrvWaitForPoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartResponseConvert
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerInterruptHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_enable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanConnect
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[106]"></a>sl_Stop</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, device.o(i.sl_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sl_Stop &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Close
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerInterruptHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[da]"></a>sl_WlanConnect</STRONG> (Thumb, 414 bytes, Stack size 216 bytes, wlan.o(i.sl_WlanConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = sl_WlanConnect &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanConnect
</UL>

<P><STRONG><a name="[10a]"></a>sl_WlanDisconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wlan.o(i.sl_WlanDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sl_WlanDisconnect &rArr; _SlDrvBasicCmd &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[108]"></a>sl_WlanPolicySet</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, wlan.o(i.sl_WlanPolicySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sl_WlanPolicySet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[109]"></a>sl_WlanProfileDel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wlan.o(i.sl_WlanProfileDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sl_WlanProfileDel &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[10c]"></a>sl_WlanSet</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, wlan.o(i.sl_WlanSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sl_WlanSet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[105]"></a>sl_WlanSetMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wlan.o(i.sl_WlanSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sl_WlanSetMode &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[120]"></a>spi_Close</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(i.spi_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
</UL>

<P><STRONG><a name="[11c]"></a>spi_Open</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, spi.o(i.spi_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_Open &rArr; GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptEnable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[f5]"></a>spi_Read</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, spi.o(i.spi_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPutNonBlocking
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[f8]"></a>spi_Write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, spi.o(i.spi_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPutNonBlocking
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
</UL>

<P><STRONG><a name="[114]"></a>stopWDT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.stopWDT))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>ustrtoul</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, ustdlib.o(i.ustrtoul))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ustrtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetTime
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetNixiePower
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetColorWheel
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetAlarm
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetWeather
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>GetBufferCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uartstdio.o(i.GetBufferCount))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPeek
</UL>

<P><STRONG><a name="[cb]"></a>IsBufferEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uartstdio.o(i.IsBufferEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgets
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[d2]"></a>IsBufferFull</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uartstdio.o(i.IsBufferFull))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[ce]"></a>UARTPrimeTransmit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, uartstdio.o(i.UARTPrimeTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[bf]"></a>SetPin</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shiftregister.o(i.SetPin))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRegister_Output
</UL>

<P><STRONG><a name="[c3]"></a>Sound_Play</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sound.o(i.Sound_Play))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2A_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Highpitch
</UL>

<P><STRONG><a name="[a8]"></a>NixieDisplay</STRONG> (Thumb, 152 bytes, Stack size 128 bytes, nixie.o(i.NixieDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = NixieDisplay &rArr; ShiftRegister_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRegister_Output
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixiePower_IsOn
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Weather
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Time
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Date
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_3
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_2
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_1
</UL>

<P><STRONG><a name="[aa]"></a>NixieDisplayDigitbyDigit</STRONG> (Thumb, 226 bytes, Stack size 136 bytes, nixie.o(i.NixieDisplayDigitbyDigit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NixieDisplayDigitbyDigit &rArr; ShiftRegister_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRegister_Output
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixiePower_IsOn
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_3
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieEffects_2
</UL>

<P><STRONG><a name="[ad]"></a>NixieEffects_1</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nixie.o(i.NixieEffects_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = NixieEffects_1 &rArr; NixieDisplay &rArr; ShiftRegister_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDots_toggle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Effects
</UL>

<P><STRONG><a name="[ae]"></a>NixieEffects_2</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, nixie.o(i.NixieEffects_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = NixieEffects_2 &rArr; NixieDisplayDigitbyDigit &rArr; ShiftRegister_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDots_toggle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplayDigitbyDigit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Effects
</UL>

<P><STRONG><a name="[ac]"></a>NixieEffects_3</STRONG> (Thumb, 370 bytes, Stack size 56 bytes, nixie.o(i.NixieEffects_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = NixieEffects_3 &rArr; NixieDisplayDigitbyDigit &rArr; ShiftRegister_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomX
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDots_toggle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplayDigitbyDigit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NixieDisplay_Effects
</UL>

<P><STRONG><a name="[9e]"></a>I2CReceive</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtc.o(i.I2CReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcTimeDate
</UL>

<P><STRONG><a name="[a4]"></a>I2CSend</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, rtc.o(i.I2CSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2CSend
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcTimeDate
</UL>

<P><STRONG><a name="[2b]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[2c]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[fd]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[14]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL>
<P><STRONG><a name="[36]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[48]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
